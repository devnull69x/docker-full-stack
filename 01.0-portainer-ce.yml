version: "3.8"

services:
  # Portainer Server (Management UI)
  portainer:
    image: portainer/portainer-ce:2.29.1 # Pinned version
    #command: --sslcert /run/secrets/portainer_cert --sslkey /run/secrets/portainer_key
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role == manager"
          - "node.labels.portainer == true" # Explicit node selection
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        max_attempts: 3
    ports:
      - target: 9443
        published: 9443
        protocol: tcp
        mode: host # Bypass Swarm routing mesh for direct host binding
    # secrets:
    #   - source: portainer_cert
    #     target: /run/secrets/portainer_cert
    #   - source: portainer_key
    #     target: /run/secrets/portainer_key
    volumes:
      - type: bind
        source: /opt/portainer_data
        target: /data
        read_only: false # Data needs RW
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      - portainer_secure
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider https://localhost:9443/api/status || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Portainer Agent (Cluster-wide)
  agent:
    image: portainer/agent:2.20.2
    hostname: "{{.Node.Hostname}}" # Dynamic hostname for node identification
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
      restart_policy:
        condition: any
    environment:
      - AGENT_CLUSTER_ADDR=tasks.agent # Swarm-native service discovery
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: /var/lib/docker/volumes
        target: /var/lib/docker/volumes
    networks:
      - portainer_secure
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:9001/ping || exit 1",
        ]
      interval: 15s
      timeout: 3s

networks:
  portainer_secure:
    driver: overlay
    attachable: false # Isolate network
    internal: true # Block external internet access
    driver_opts:
      encrypted: true # Encrypt overlay traffic

volumes:
  portainer_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/portainer_data
# secrets:
#   portainer_cert:
#     external: true # Pre-created: `docker secret create portainer_cert cert.pem`
#   portainer_key:
#     external: true # Pre-created: `docker secret create portainer_key key.pem`
