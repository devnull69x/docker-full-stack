version: '3.9'
# echo "mysupersecretpassword" | docker secret create redis_auth_password -
# echo "mysupersecretpassword" | docker secret create redis_master_password -
# echo "mysupersecretpassword" | docker secret create redis_password -

services:

  redis-node-0:
    image: docker.io/bitnami/redis-cluster:6.2
    volumes:
      - redis-cluster_data-0:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=/run/secrets/redis_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-master'

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:6.2
    volumes:
      - redis-cluster_data-1:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=/run/secrets/redis_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-master'

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:6.2
    volumes:
      - redis-cluster_data-2:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=/run/secrets/redis_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-master'

  redis-node-3:
    container_name: redis-node-3
    image: docker.io/bitnami/redis-cluster:6.2
    restart: always
    depends_on:
      - portainer-agent
      - portainer
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    environment:
      - 'REDIS_PASSWORD=/run/secrets/redis_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-master'
    networks:
      - app-tier
    secrets:
      - redis_auth_password
    volumes:
      - redis-cluster_data-3:/bitnami/redis/data

  redis-master:
    container_name: redis-master
    image: docker.io/bitnami/redis-cluster:6.2
    restart: always
    depends_on:
      - portainer-agent
      - portainer
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    environment:
      - 'ALLOW_EMPTY_PASSWORD=no'
      - 'REDISCLI_AUTH=/run/secrets/redis_auth_password'
      - 'REDIS_PASSWORD=/run/secrets/redis_password'
      - 'REDIS_CLUSTER_REPLICAS=1'
      - 'REDIS_CLUSTER_CREATOR=yes'
      - 'REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-master'
    networks:
      - app-tier
    secrets:
      - redis_auth_password
      - redis_password
    volumes:
      - redis_master_data:/bitnami/redis/data

  balancer:
    image: docker.io/bitnami/haproxy:2-debian-10
    container_name: haproxy
    deploy:
      replicas: 1
      mode: global
      placement:
        constraints:
          - node.role == manager
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-master
      - portainer
      - portainer-agent
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '9000:9000'
    networks:
      - pres-tier
    volumes:
      - './configs/haproxy.cfg:/bitnami/haproxy/conf/haproxy.cfg'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'haproxy_data:/var/log/haproxy'
      - './errors/400.http:/etc/haproxy/errors/400.http'
      - './errors/403.http:/etc/haproxy/errors/403.http'
      - './errors/408.http:/etc/haproxy/errors/408.http'
      - './errors/500.http:/etc/haproxy/errors/500.http'
      - './errors/502.http:/etc/haproxy/errors/502.http'
      - './errors/503.http:/etc/haproxy/errors/503.http'
      - './errors/504.http:/etc/haproxy/errors/504.http'

  prometheus:
    image: docker.io/bitnami/prometheus:2-debian-10
    container_name: prometheus
    deploy:
      replicas: 1
      mode: global
      placement:
        constraints:
          - node.role == manager
    restart: always
    ports:
      - '10052:10052'
    networks:
      - pres-tier
    volumes:
      - ./configs/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml

  portainer-agent:
    container_name: portainer-agent
    image: portainer/agent:2.9.1
    restart: always
    deploy:
      mode: global
      replicas: 1
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition:  on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
    networks:
      - agent-tier
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.9.1
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.platform == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      labels: []
    networks:
      - agent-tier
    ports:
      - '9443:9443'
      - '10053:9000'
      - '8000:8000'
    volumes:
      - portainer_data:/data
    command: -H tcp://tasks.agent:9001 --tlsskipverify

volumes:
  haproxy_data:
    driver: local
  redis_master_data:
    driver: local
  redis-cluster_data-0:
    driver: local
  redis-cluster_data-1:
    driver: local
  redis-cluster_data-2:
    driver: local
  redis-cluster_data-3:
    driver: local
  portainer_data:
    driver: local

networks:
  pres-tier:
    driver: bridge
  app-tier:
    driver: bridge
  data-tier:
    driver: bridge
  agent-tier:
    driver: overlay
    attachable: true

secrets:
  redis_master_password:
    external: true
  redis_auth_password:
    external: true
  redis_password:
    external: true
