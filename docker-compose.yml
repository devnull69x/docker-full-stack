version: '3.9'

services:
  redis-master:
    image: docker.io/bitnami/redis:6.2-debian-10
    deploy:
      replicas: 1
    ports:
      - '6379:6379'
    environment:
      - ALLOW_EMPTY_PASSWORD= no
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD= /run/secrets/redis_master_password
      - REDIS_PORT_NUMBER=6379
    volumes:
      - 'redis_data:/bitnami/redis/data/'
    networks:
      - app-tier


  redis-secondary:
    image: docker.io/bitnami/redis:6.2-debian-10
    depends_on:
      - redis-master
    deploy:
      replicas: 1
    ports:
      - '6379:6379'
    environment:
      - ALLOW_EMPTY_PASSOWRD=no
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_MASTER_PASSWORD= /run/secrets/redis_master_password
      - REDIS_PASSWORD= /run/secrets/redis_slave_password
      - REDIS_REPLICA_IP=$(get_machine_ip)
      - REDIS_REPLICA_PORT=6379
      - REDIS_DSIABLE_COMMANDS= FLUSHDB, FLUSHALL, CONFIG
    networks:
      - app-tier
    secrets:
      - redis_master_password
      - redis_slave_password

  balancer:
    image: docker.io/bitnami/haproxy:2-debian-10
    container_name: balancer
    deploy:
      replicas: 1
      mode: global
      placement:
        constraints:
          - node.role == manager
    restart: always
    ports:
      - '80:80'
      - '443:443'
    networks:
      - pres-tier
    volumes:
      - ./configs/haproxy.cfg:/bitnami/haproxy/conf/haproxy.cfg
      - /var/run/docker.sock:/var/run/docker.sock
      -
  prometheus:
    image: docker.io/bitnami/prometheus:2-debian-10
    container_name: prometheus
    deploy:
      repliacs: 1
      mode: global
      placement:
        constraints:
          - node.role == manager
    restart: always
    ports:
      - '10052:10052'
    networks:
      - pres-tier
    volumes:
      - ./configs/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml

volumes:
    redis_data: {}

networks:
  pres-tier:
    driver: bridge
  app-tier:
    driver: bridge
  data-tier:
    driver: bridge

secrets:
  redis_master_password: # echo "mysupersecretpassword" | docker secret create redis_master_password -
    external: true
  redis_slave_password: # echo "mysupersecretpassword" | docker secret create redis_slave_password -
    external: true
